import { CrossCheckResult, Quote, TopicSummary } from '../types/index.js';

export function formatResults(result: CrossCheckResult): string {
  let output = '';

  // Header with verdict
  output += formatHeader(result);
  output += '\n\n';

  // Topic summaries
  if (result.summary.length > 0) {
    output += formatSummaries(result.summary);
    output += '\n\n';
  }

  // Key quotes
  output += formatQuotes(result);
  output += '\n\n';

  // Sources
  output += formatSources(result);

  return output;
}

function formatHeader(result: CrossCheckResult): string {
  const verdictEmoji = {
    'verified': '‚úÖ',
    'disputed': '‚ùå',
    'unverified': '‚ùì',
    'mixed': '‚ö†Ô∏è',
  };

  const verdictText = {
    'verified': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ',
    'disputed': '–û–ø—Ä–æ–≤–µ—Ä–≥–Ω—É—Ç–æ',
    'unverified': '–ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ',
    'mixed': '–°–º–µ—à–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã',
  };

  const confidence = Math.round(result.confidence * 100);

  return `
üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è*

*–ó–∞–ø—Ä–æ—Å:* _${escapeMarkdown(result.originalClaim)}_

*–í–µ—Ä–¥–∏–∫—Ç:* ${verdictEmoji[result.verdict]} ${verdictText[result.verdict]}
*–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:* ${confidence}%
*–ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:* ${result.sources.length}
`;
}

function formatSummaries(summaries: TopicSummary[]): string {
  let output = 'üìù *–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ —Ç–µ–º–∞–º:*\n';

  for (const summary of summaries) {
    output += `\n*${escapeMarkdown(summary.topic)}*\n`;
    output += `${escapeMarkdown(summary.summary)}\n`;
    output += `_–ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: ${summary.sources.length}_\n`;
  }

  return output;
}

function formatQuotes(result: CrossCheckResult): string {
  let output = 'üí¨ *–ö–ª—é—á–µ–≤—ã–µ —Ü–∏—Ç–∞—Ç—ã:*\n';

  // Get top quotes from all sources
  const allQuotes = result.sources
    .flatMap(source => source.quotes)
    .slice(0, 5);

  if (allQuotes.length === 0) {
    return output + '\n_–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã_';
  }

  for (const quote of allQuotes) {
    output += formatSingleQuote(quote);
  }

  return output;
}

function formatSingleQuote(quote: Quote): string {
  let output = '\n';
  
  // Original quote
  output += `> "${escapeMarkdown(quote.text)}"\n`;
  
  // Translation if available
  if (quote.translation) {
    output += `> _–ü–µ—Ä–µ–≤–æ–¥: "${escapeMarkdown(quote.translation)}"_\n`;
  }
  
  // Source
  output += `[–ò—Å—Ç–æ—á–Ω–∏–∫](${quote.sourceUrl})\n`;

  return output;
}

function formatSources(result: CrossCheckResult): string {
  let output = 'üìö *–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:*\n';

  // Group by trusted/untrusted
  const trustedSources = result.sources.filter(s => s.source.isTrusted);
  const otherSources = result.sources.filter(s => !s.source.isTrusted);

  if (trustedSources.length > 0) {
    output += '\n*–î–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:*\n';
    for (const source of trustedSources) {
      const relevance = Math.round(source.relevanceScore * 100);
      output += `‚Ä¢ [${escapeMarkdown(source.source.title)}](${source.source.url}) - ${relevance}% —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏\n`;
    }
  }

  if (otherSources.length > 0) {
    output += '\n*–î—Ä—É–≥–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:*\n';
    for (const source of otherSources) {
      const relevance = Math.round(source.relevanceScore * 100);
      output += `‚Ä¢ [${escapeMarkdown(source.source.title)}](${source.source.url}) - ${relevance}% —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏\n`;
    }
  }

  return output;
}

function escapeMarkdown(text: string): string {
  return text
    .replace(/[_*[\]()~`>#+=|{}.!-]/g, '\\$&')
    .trim();
}

export function formatError(error: string): string {
  return `
‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è*

${escapeMarkdown(error)}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:
‚Ä¢ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è
‚Ä¢ –°–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º
`;
}

export function formatProgress(stage: string, current: number, total: number): string {
  const percentage = Math.round((current / total) * 100);
  const progressBar = createProgressBar(percentage);

  return `
üîç *${stage}*

${progressBar} ${percentage}%
_–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${current} –∏–∑ ${total}_
`;
}

function createProgressBar(percentage: number): string {
  const filled = Math.round(percentage / 10);
  const empty = 10 - filled;
  
  return '‚ñì'.repeat(filled) + '‚ñë'.repeat(empty);
}