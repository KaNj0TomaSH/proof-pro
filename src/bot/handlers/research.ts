import { Context } from 'telegraf';
import { ResearchRequest } from '../../types/index.js';
import { ResearchService } from '../../services/research.js';
import { formatResults } from '../../utils/formatter.js';

const researchService = new ResearchService();

export async function handleResearch(ctx: Context) {
  if (!ctx.message || !('text' in ctx.message)) {
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.');
    return;
  }

  const query = ctx.message.text;
  const userId = ctx.from?.id || 0;
  const chatId = ctx.chat?.id || 0;

  // Validate query
  if (query.length < 5) {
    await ctx.reply('–ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Ç–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ.');
    return;
  }

  if (query.startsWith('/')) {
    // This is a command, not a research query
    return;
  }

  const request: ResearchRequest = {
    query,
    userId,
    chatId,
    timestamp: new Date(),
  };

  try {
    // Send initial message
    const processingMessage = await ctx.reply(
      'üîç –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...\n‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.'
    );

    // Update status
    await ctx.telegram.editMessageText(
      chatId,
      processingMessage.message_id,
      undefined,
      'üîç –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...\nüìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏—Å—Ç–æ—á–Ω–∏–∫–∏...'
    );

    // Perform research
    const results = await researchService.performResearch(request);

    // Update status
    await ctx.telegram.editMessageText(
      chatId,
      processingMessage.message_id,
      undefined,
      '‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!\nüìù –§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á–µ—Ç...'
    );

    // Format and send results
    const formattedResults = formatResults(results);
    
    // Split message if too long
    const chunks = splitMessage(formattedResults);
    
    for (const chunk of chunks) {
      await ctx.replyWithMarkdown(chunk, {
        // @ts-ignore
        disable_web_page_preview: true,
      });
    }

    // Delete processing message
    await ctx.telegram.deleteMessage(chatId, processingMessage.message_id);

  } catch (error) {
    console.error('Research error:', error);
    await ctx.reply(
      '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å.'
    );
  }
}

function splitMessage(text: string, maxLength: number = 4000): string[] {
  if (text.length <= maxLength) {
    return [text];
  }

  const chunks: string[] = [];
  let currentChunk = '';

  const lines = text.split('\n');
  
  for (const line of lines) {
    if (currentChunk.length + line.length + 1 > maxLength) {
      chunks.push(currentChunk);
      currentChunk = line;
    } else {
      currentChunk += (currentChunk ? '\n' : '') + line;
    }
  }

  if (currentChunk) {
    chunks.push(currentChunk);
  }

  return chunks;
}